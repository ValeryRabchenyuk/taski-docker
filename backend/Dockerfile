# Названия инструкций пишутся заглавными буквами.
# Docker будет выполнять эти инструкции последовательно, одну за другой.

# Создать образ на основе базового слоя,
# который содержит файлы ОС и интерпретатор Python 3.9.
FROM python:3.9

# Переходим в образе в директорию /app: в ней будем хранить код проекта.
# Если директории с указанным именем нет, она будет создана. 
# Название директории может быть любым.
WORKDIR /app
# Дальнейшие инструкции будут выполняться в директории /app

# Cистемные зависимости в образе лучше устанавливать до копирования файлов приложения.
RUN pip install gunicorn==20.1.0

# Скопировать с локального компьютера файл зависимостей
# в текущую директорию (текущая директория — это /app).
COPY requirements.txt .

# Выполнить в текущей директории команду терминала
# для установки зависимостей.
# Инструкцией RUN можно выполнить любую команду, которую обычно вызывают через терминал.
# можно вызвать только ту утилиту, которая уже установлена в образе
RUN pip install -r requirements.txt --no-cache-dir

# Скопировать всё необходимое содержимое 
# той директории локального компьютера, где сохранён Dockerfile,
# в текущую рабочую директорию образа — /app.
COPY . .

# Инструкция CMD указывает, какую команду нужно выполнить при запуске контейнера
# При старте контейнера запустить сервер разработки. 
# — в Dockerfile срабатывает только одна инструкция CMD. Если несколько, выполнится только последнеяя.
# — параметры инструкции CMD указываются в виде JSON-массива, элементы массива заключаются в двойные кавычки;
# — первым элементом указывается исполняемый файл, например, интерпретатор Python;
#   следом указываются параметры для запуска исполняемого файла:
#   БЫЛО:
# CMD ["python", "manage.py", "runserver", "0:8000"]
#   СТАЛО:
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "backend.wsgi"]